exit
c
neighbors.map(&:to_s)
n
result.map(&:to_s)
n
result.map(&:to_s)
result.map(:to_s)
vertex.value
starting_vertices.count
starting_vertices
n
neighbors[0].value
neighbors.count
n
result.count
n
vertex
n
starting_vertices.map {|i| i.to_s}
starting_vertices.count
result.count
n
s
neighbors.map {|i| i.to_s}
neighbors
n
result
n
result
n
vertex
n
c
n
s
n
  vertices.select {|v| v.in_edges.all? {|e| e.from_vertex.visited} }.map {|i| i.to_s}
  vertices.select {|v| v.in_edges.all? {|e| e.from_vertex.visited} } 
  end
    v.in_edges.all? { |e| e.from_vertex.visited }
  vertices.select do |v|
vertices.map {|v| v.to_s}
vertices
c
vertex.value
n
starting_vertices.count
s
neighbor.value
s
n
neighbors[1]
neighbors.include?(v3)
neighbors.count
neighbors
n
starting_vertices.count
starting_vertices
c
vertices
c
vertices.count
vertices
v4.out_edges
starting_vertices.count
starting_vertices
c
selfc
starting_vertices
vertex
n
vertex
c
vertex.out_edges
vertex
neighbors.count
neighbors
c
starting_vertices.count
starting_vertices
c
starting_vertices.count
starting_vertices
c
vertex.out_edges.each { |e| puts e.from_vertex.value }
vertex.value
vertex.out_edges.each { |e| puts e.to_vertex.value }
vertex.out_edges.each { |v| puts v.value }
vertex.out_edges.count
vertex.out_edges
n
c
@from_vertex.out_edges
@from_vertex.out_edges.delete_at(@from_vertex.out_edges.index(self))
@from_vertex.out_edges
@from_vertex.out_edges.delete(@from_vertex.out_edges.index(self))
@from_vertex.out_edges[0]
@from_vertex.out_edges
c
@from_vertex.out_edges.index(11)
self
@from_vertex.out_edges.index(self)
c
@from_vertex.in_edges
@from_vertex.in_edges = self
@from_vertex.in_edges
c
n
s
self
s
self
s
self
@from_vertex
c
n
@from_vertex
self
c
n
self
@from_vertex.in_edges
@from_vertex
